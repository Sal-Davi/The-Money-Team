---
title: "Financial Rebalancing"
format: html
---
getwd()
## Importing data

```{r}

library(dplyr)
library(ggplot2)
library(tidyr)
library(gganimate)
library(ggthemes)
library(httr)
library(jsonlite)
library(lubridate)

# setwd("C:/Users/orazz/OneDrive - The City University of New York (1)/MASTER/STA9750-2025-SPRING")
setwd("C:/Users/salda/OneDrive/Documents/money team")
FRED_key <- readLines("FRED_key.txt")
get_fred<- function(id){
  base_url <- "https://api.stlouisfed.org/fred/series/observations?series_id="
  res <- GET(paste0(base_url,id,"&api_key=",FRED_key,"&file_type=json"))
  res_content <- content(res, as = "text", encoding = "UTF-8")
  json <- fromJSON(res_content)
  data <-json$observations
  data <- data |> mutate(value = as.numeric(value),# immediately convert to usable format
                         date = as.Date(date))
  return(data)
}

# Read your Alpha Vantage key
AV_key <- readLines("Alphavantage_key.txt")

# Function to get data from Alpha Vantage for a given ticker
GET_AV <- function(ticker){
  
  # Build the URL for the monthly adjusted time series
  url <- paste0(
    "https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED",
    "&symbol=", ticker,
    "&apikey=", AV_key
  )
  
  # Make the GET request and parse the JSON response
  res <- GET(url)
  res_content <- content(res, as = "text", encoding = "UTF-8")
  j <- fromJSON(res_content, flatten = TRUE)
  
  # Extract the "Monthly Adjusted Time Series" data
  data <- j$`Monthly Adjusted Time Series`
  
  # Create empty vectors to store our data
  close <- c()
  adjusted_close <- c()
  low <- c()
  volume <- c()
  dividend <- c()
  
  # Loop over each element in the data to unpack the values.
  for(i in seq_along(data)){
    close <- append(close, data[[i]][["4. close"]])
    adjusted_close <- append(adjusted_close, data[[i]][["5. adjusted close"]])
    low <- append(low, data[[i]][["3. low"]])
    volume <- append(volume, data[[i]][["6. volume"]])
    dividend <- append(dividend, data[[i]][["7. dividend amount"]])
  }
  
  # Build the data frame
  df <- data.frame(
    date = as.Date(names(data)),
    close = as.numeric(close),
    adjusted_close = as.numeric(adjusted_close),
    low = as.numeric(low),
    volume = as.numeric(volume),
    dividend = as.numeric(dividend)
  )
  
  return(df)
}
```

## GDP Per Capita

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
library(purrr)

# Named vector of FRED IDs
series_ids <- c(
  USA     = "A939RC0Q052SBEA",
  China   = "PCAGDPCNA646NWDB",
  Germany = "PCAGDPDEA646NWDB",
  India   = "PCAGDPINA646NWDB",
  Japan   = "PCAGDPJPA646NWDB",
  UK      = "PCAGDPGBA646NWDB",
  France  = "PCAGDPFRA646NWDB",
  Italy   = "PCAGDPITA646NWDB"
)

# Pull, tag, combine, and then filter to 1960-01-01 onward
gdp_pc_long <- series_ids |>
  imap_dfr(function(id, country) {
    get_fred(id) |>
      select(date, value) |>
      mutate(
        country = country,
        gdp_pc  = value
      ) |>
      select(date, country, gdp_pc)
  }) |>
  filter(date >= as.Date("1960-01-01"))

# Pivot to wide form (if you need it)
gdp_pc_wide <- gdp_pc_long |>
  pivot_wider(
    names_from  = country,
    values_from = gdp_pc
  )

head(gdp_pc_long)

# And the plot:
gdp_pc_long |>
  ggplot(aes(x = date, y = gdp_pc, color = country)) +
    geom_line(size = 1) +
    labs(
      title = "GDP per Capita (1960 onward)",
      x     = NULL,
      y     = "GDP per Capita (USD)",
      color = NULL
    ) +
    theme_minimal()

```

#Inflation
```{r}
library(dplyr)
library(purrr)

inflation_ids <- c(
  USA     = "FPCPITOTLZGUSA",  
  China   = "FPCPITOTLZGCHN",  
  Germany = "FPCPITOTLZGDEU", 
  India   = "FPCPITOTLZGIND",  
  Japan   = "FPCPITOTLZGJPN",  
  UK      = "FPCPITOTLZGGBR",   
  France  = "FPCPITOTLZGFRA", 
  Italy   = "FPCPITOTLZGITA"   
)

# Fetch, tag, and combine into one long tibble
inflation_long <- inflation_ids |>
  imap_dfr(function(id, country) {
    get_fred(id) |>
      select(date, value) |>
      mutate(
        country   = country,
        inflation = value
      ) |>
      select(date, country, inflation)
  })

head(inflation_long)


inflation_long |>
  ggplot(aes(x = date, y = inflation, color = country)) +
    geom_line(size = 1) +
    labs(
      title = "Annual Consumer-Price Inflation",
      subtitle = "Inflation, consumer prices (annual % change) for selected economies",
      x = NULL,
      y = "Inflation Rate (%)",
      color = NULL
    ) +
    theme_minimal() +
    theme(
      plot.title    = element_text(size = 16, face = "bold"),
      plot.subtitle = element_text(size = 12),
      legend.position = "bottom"
    )
```

## ETFs for each of the nations
```{r}
# Load necessary libraries
library(dplyr)
library(purrr)
library(ggplot2)

# Named vector of ETF tickers for each country
# USA: SPY (S&P 500), China: FXI (iShares China Large-Cap), Germany: EWG (iShares MSCI Germany),
# India: INDA (iShares MSCI India), Japan: EWJ (iShares MSCI Japan), UK: EWU (iShares MSCI United Kingdom),
# France: EWQ (iShares MSCI France), Italy: EWI (iShares MSCI Italy)
etf_tickers <- c(
  USA     = "SPY",
  China   = "FXI",
  Germany = "EWG",
  India   = "INDA",
  Japan   = "EWJ",
  UK      = "EWU",
  France  = "EWQ",
  Italy   = "EWI"
)

# Fetch, tag, and combine ETF price histories
etf_prices_long <- etf_tickers |>
  imap_dfr(function(ticker, country) {
    GET_AV(ticker) |>
      select(date, adjusted_close) |>
      mutate(
        country = country,
        price   = adjusted_close
      ) |>
      select(date, country, price)
  })

# Quick look
head(etf_prices_long)
#> # A tibble: 6 × 3
#>   date       country price
#>   <date>     <chr>   <dbl>
#> 1 1993-01-29 USA      43.5
#> 2 1993-02-26 USA      44.1
#> 3 1993-03-31 USA      44.8
#> 4 1993-04-30 USA      45.4
#> 5 1993-05-28 USA      45.2
#> 6 1993-06-30 USA      45.5

# Plot the price history for each ETF
etf_prices_long |>
  ggplot(aes(x = date, y = price, color = country)) +
    geom_line(size = 1) +
    labs(
      title    = "ETF Price History by Country",
      subtitle = "Adjusted closing prices for representative country ETFs",
      x        = NULL,
      y        = "Adjusted Close Price (USD)",
      color    = NULL
    ) +
    theme_minimal() +
    theme(
      plot.title     = element_text(size = 16, face = "bold"),
      plot.subtitle  = element_text(size = 12),
      legend.position = "bottom"
    )

```


```{r}
# Pivot to wide form so each country is a column
etf_prices_wide <- etf_prices_long |>
  pivot_wider(
    names_from  = country,
    values_from = price
  )

# Print the first 10 rows in the console
head(etf_prices_wide, 10)

# (Optional) For a nicer table in R Markdown or RStudio Viewer:
# install.packages("knitr")    # if you haven’t already
library(knitr)
kable(
  head(etf_prices_wide, 10),
  caption = "ETF Adjusted Closing Prices by Country (First 10 Observations)"
)


```

# Analysis
```{r}
library(dplyr)
library(tidyr)
library(purrr)
library(PerformanceAnalytics)  # for return calculations

# up at the top of your script
library(TTR)               # <- gives you ROC()
library(PerformanceAnalytics)

etf_ret <- etf_prices_wide |>
  arrange(date) |>
  mutate(across(-date, ~ ROC(.x, type = "discrete"))) |>
  tidyr::drop_na()
# 1b) Compute rolling annual GDP-per-capita growth per country
#    (using quarterly GDP PC → annualized % change)
gdp_growth <- gdp_pc_wide |>
  arrange(date) |>
  mutate(across(-date, ~ (./lag(., 4) - 1) * 100, .names = "{.col}_growth")) |>
  select(date, ends_with("_growth")) |>
  drop_na()
```



```{r}
library(dplyr)
library(tidyr)
library(zoo)                   # for as.yearqtr()
library(TTR)                   # for ROC()
library(ggplot2)
library(PerformanceAnalytics)
library(xts)

# 0) Define your regions
regions <- c("USA","China","Germany","India","Japan","UK","France","Italy")

# 1) Quarterly GDP‐pc growth (annualized %)
gdp_growth_q <- gdp_pc_wide |>
  arrange(date) |>
  mutate(across(-date, ~ (./lag(.,4) - 1)*100, .names = "{.col}_g")) |>
  mutate(quarter = as.yearqtr(date)) |>
  group_by(quarter) |>
  slice_tail(n = 1) |>
  ungroup() |>
  select(quarter, ends_with("_g"))

# turn to long form: one row per country
gdp_long <- gdp_growth_q |>
  pivot_longer(
    cols      = ends_with("_g"),
    names_to  = "country",
    names_pattern = "(.+)_g",
    values_to = "gdp_g"
  )

# 2) Quarterly inflation
infl_q <- inflation_long |>
  mutate(quarter = as.yearqtr(date)) |>
  group_by(quarter, country) |>
  slice_tail(n = 1) |>
  ungroup()

# turn to long form
infl_long <- infl_q |>
  select(quarter, country, inflation) |>
  rename(infl_i = inflation)

# 3) Merge signals into one long table
signals_long <- full_join(gdp_long, infl_long, by = c("quarter","country"))

# 4) Compute monthly ETF returns & tag quarter
etf_ret <- etf_prices_wide |>
  arrange(date) |>
  mutate(across(-date, ~ ROC(.x, type = "discrete"))) |>
  drop_na() |>
  mutate(quarter = as.yearqtr(date))

# 5) Calendar strategy: equal‐weight
port_cal <- etf_ret |>
  rowwise() |>
  mutate(port = mean(c_across(all_of(regions)))) |>
  ungroup() |>
  select(date, port)

# 6) Tactical weights in long form
tac_long <- signals_long |>
  group_by(quarter) |>
  mutate(
    down = (gdp_g < 0) | (infl_i > 4),
    down = replace_na(down, FALSE),
    base = 1 / n(),
    w0   = if_else(down, base * 0.5, NA_real_)
  ) |>
  ungroup() |>
  group_by(quarter) |>
  mutate(
    freed = sum(base - w0, na.rm = TRUE),
    up    = !down,
    w     = if_else(is.na(w0), freed / sum(up), w0)
  ) |>
  ungroup() |>
  select(quarter, country, w)

# 7) Pivot tactical weights back to wide (one column per country)
quarterly_wts <- tac_long |>
  pivot_wider(
    names_from  = country,
    values_from = w,
    names_prefix = "",
    values_fill = 0
  ) |>
  rename_with(~ paste0(.x, "_wt"), all_of(regions))

# 8) Tactical strategy: apply those weights each month
port_tac <- etf_ret |>
  left_join(quarterly_wts, by = "quarter") |>
  rowwise() |>
  mutate(
    port = sum(
      c_across(all_of(regions)) *
      c_across(all_of(paste0(regions, "_wt")))
    )
  ) |>
  ungroup() |>
  select(date, port)

# 9) Compare & plot cumulative returns
compare <- bind_rows(
  Calendar = port_cal,
  Tactical = port_tac,
  .id = "strategy"
)

compare |>
  group_by(strategy) |>
  arrange(date) |>
  mutate(cum = cumprod(1 + port) - 1) |>
  ggplot(aes(date, cum, color = strategy)) +
    geom_line(linewidth = 1) +
    labs(
      title = "Calendar vs. GDP/Inflation Tactical Rebalancing",
      x = NULL, y = "Cumulative Return",
      color = NULL
    ) +
    theme_minimal()

# 10) Annualized performance table
wide_ret <- compare |> pivot_wider(names_from = strategy, values_from = port) |> select(-date)
ret_xts  <- xts(wide_ret, order.by = compare$date[compare$strategy == "Calendar"])
PerformanceAnalytics::table.AnnualizedReturns(ret_xts, Rf = 0)


```

# STRATEGY 
## 
```{r}
# Build GDP per capita table
series_ids <- c(
  USA     = "A939RC0Q052SBEA",
  China   = "PCAGDPCNA646NWDB",
  Germany = "PCAGDPDEA646NWDB",
  India   = "PCAGDPINA646NWDB",
  Japan   = "PCAGDPJPA646NWDB",
  UK      = "PCAGDPGBA646NWDB",
  France  = "PCAGDPFRA646NWDB",
  Italy   = "PCAGDPITA646NWDB"
)
gdp_pc_long <- imap_dfr(series_ids, function(id, country) {
  get_fred(id) %>%
    rename(gdp_pc = value) %>%
    mutate(country = country)
}) %>%
  filter(date >= as.Date("1960-01-01"))

# 5) Build inflation long table
inflation_ids <- c(
  USA     = "FPCPITOTLZGUSA",
  China   = "FPCPITOTLZGCHN",
  Germany = "FPCPITOTLZGDEU",
  India   = "FPCPITOTLZGIND",
  Japan   = "FPCPITOTLZGJPN",
  UK      = "FPCPITOTLZGGBR",
  France  = "FPCPITOTLZGFRA",
  Italy   = "FPCPITOTLZGITA"
)
inflation_long <- imap_dfr(inflation_ids, function(id, country) {
  get_fred(id) %>%
    rename(inflation = value) %>%
    mutate(country = country)
})

# 6) Fetch VEA & VWO monthly returns
vea_ret <- GET_AV("VEA") %>%
  mutate(ret_dev = adjusted_close / lag(adjusted_close) - 1) %>%
  select(date, ret_dev) %>%
  drop_na()

vwo_ret <- GET_AV("VWO") %>%
  mutate(ret_emg = adjusted_close / lag(adjusted_close) - 1) %>%
  select(date, ret_emg) %>%
  drop_na()

# 7) Compute quarterly EM & DM macro signals
dev_countries <- c("USA","Japan","UK","France","Germany")
emg_countries <- c("China","India")

gdp_growth_country <- gdp_pc_long %>%
  arrange(country, date) %>%
  group_by(country) %>%
  mutate(
    gdp_growth = (gdp_pc / lag(gdp_pc, 4) - 1) * 100,
    quarter    = as.yearqtr(date)
  ) %>%
  filter(!is.na(gdp_growth)) %>%
  ungroup()

gdp_emg_q <- gdp_growth_country %>%
  filter(country %in% emg_countries) %>%
  group_by(quarter) %>%
  summarize(gdp_emg = mean(gdp_growth, na.rm=TRUE), .groups="drop")

gdp_dev_q <- gdp_growth_country %>%
  filter(country %in% dev_countries) %>%
  group_by(quarter) %>%
  summarize(gdp_dev = mean(gdp_growth, na.rm=TRUE), .groups="drop")

infl_long_q <- inflation_long %>%
  mutate(quarter = as.yearqtr(date))

infl_emg_q <- infl_long_q %>%
  filter(country %in% emg_countries) %>%
  group_by(quarter) %>%
  slice_tail(n=1) %>%
  summarize(infl_emg = mean(inflation, na.rm=TRUE), .groups="drop")

infl_dev_q <- infl_long_q %>%
  filter(country %in% dev_countries) %>%
  group_by(quarter) %>%
  slice_tail(n=1) %>%
  summarize(infl_dev = mean(inflation, na.rm=TRUE), .groups="drop")

signals <- gdp_emg_q %>%
  left_join(infl_emg_q, by="quarter") %>%
  left_join(gdp_dev_q,   by="quarter") %>%
  left_join(infl_dev_q,  by="quarter")

# 8) Build monthly table with signals
sig_monthly <- vea_ret %>%
  left_join(vwo_ret, by="date") %>%
  mutate(quarter = as.yearqtr(date)) %>%
  left_join(signals, by="quarter") %>%
  drop_na(gdp_emg, infl_emg, gdp_dev, infl_dev)

# 9) Calendar vs. Tactical strategies, starting at 75/25

infl_thr <- 4

# — Calendar always 75% VEA / 25% VWO
baseline <- sig_monthly %>%
  mutate(
    wt_vea    = 0.75,
    wt_vwo    = 0.25,
    strat_ret = wt_vea * ret_dev + wt_vwo * ret_emg
  )

# — Tactical starts 75/25, then tilts away from any “down” region
tactical <- sig_monthly %>%
  mutate(
    # signals
    emg_down = (gdp_emg < 0) | (infl_emg > infl_thr),
    dev_down = (gdp_dev < 0) | (infl_dev > infl_thr),
    emg_down = replace_na(emg_down, FALSE),
    dev_down = replace_na(dev_down, FALSE),

    # start at 25% VWO, 75% VEA
    wt_vwo = 0.25,
    wt_vea = 1 - wt_vwo,

    # if Emerging is down → cut VWO in half (12.5%), give rest to VEA
    wt_vwo = if_else(emg_down, wt_vwo * 0.5, wt_vwo),
    wt_vea = 1 - wt_vwo,

    # if Developed is down → cut VEA in half (37.5%), give rest to VWO
    wt_vea = if_else(dev_down, wt_vea * 0.5, wt_vea),
    wt_vwo = 1 - wt_vea,

    # portfolio return
    strat_ret = wt_vea * ret_dev + wt_vwo * ret_emg
  )

# 10) Combine, plot & metrics (unchanged)
df <- bind_rows(
  Calendar75_25 = baseline  %>% select(date, strat_ret),
  Tactical      = tactical %>% select(date, strat_ret),
  .id = "strategy"
)

df %>%
  group_by(strategy) %>%
  arrange(date) %>%
  mutate(cum = cumprod(1 + strat_ret) - 1) %>%
  ggplot(aes(date, cum, color = strategy)) +
    geom_line(size = 1) +
    labs(
      title = "VEA/VWO: Calendar 75/25 vs. Tactical Tilt (EM & Dev Signals)",
      x     = NULL, y = "Cumulative Return"
    ) +
    theme_minimal()

metrics <- df %>%
  group_by(strategy) %>%
  summarize(
    n_months = n(),
    cum_ret  = prod(1 + strat_ret) - 1,
    ann_ret  = (1 + cum_ret)^(12 / n_months) - 1,
    ann_vol  = sd(strat_ret, na.rm=TRUE) * sqrt(12),
    sharpe   = ann_ret / ann_vol,
    .groups  = "drop"
  ) %>%
  select(strategy, ann_ret, ann_vol, sharpe)

print(metrics)

```



```{r}


```



```{r}

```


```{r}

```


```{r}

```


```{r}

```

```{r}

```


```{r}

```


```{r}

```

```{r}

```


```{r}

```


```{r}

```


```{r}

```

```{r}

```

```{r}

```


```{r}

```